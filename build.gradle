plugins {
    id 'java'
    id 'signing'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        name = "central"
        url = "https://repo1.maven.org/maven2/"
    }
    maven { url 'https://jitpack.io' }
}

group 'com.extollit.gaming'
description = "An iterative A* path-finding engine designed for blocky sandbox games having entities with differing path requirements"
version '1.8.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    example {
        java {
            compileClasspath = main.compileClasspath + main.output
            runtimeClasspath = main.runtimeClasspath + main.output
        }
    }
    test {
        java {
            compileClasspath = test.compileClasspath + example.output
            runtimeClasspath = test.runtimeClasspath + example.output
        }
    }
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: "org.mockito", name: "mockito-core", version: "5.5.0"
    testImplementation group: 'net.jqwik', name: 'jqwik', version: '1.6.5'

    implementation group: 'com.extollit', name: 'data-structures', version: '2.18'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task shipDoc(type: Jar) {
    archiveClassifier.set('javadoc') // Updated property
    from javadoc
}
task shipSrc(type: Jar) {
    archiveClassifier.set('sources') // Updated property
    from sourceSets.main.allSource
}

tasks.withType(Test).configureEach {
    // Set Mockito to lenient globally for all test tasks
    systemProperty 'mockito.strictness', 'lenient'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact shipDoc
            artifact shipSrc
        }
    }

    repositories {
        maven {
            url = uri("https://repo.maven.apache.org/maven2")
            credentials {
                username = project.findProperty("ossrhUsername") ?: ""
                password = project.findProperty("ossrhPassword") ?: ""
            }
        }
    }
}

if (project.hasProperty("signing.keyId") && project.hasProperty("signing.password") && project.hasProperty("signing.secretKeyRingFile")) {
    signing {
        useInMemoryPgpKeys(findProperty("signing.keyId"), findProperty("signing.secretKeyRingFile"))
        sign publishing.publications
    }
}
